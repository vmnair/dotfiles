-- noice.nvim
return {
	-- "folke/noice.nvim",
	-- event = "VeryLazy",
	-- opts = {
	-- 	-- add any options here
	-- },
	-- dependencies = {
	-- 	-- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
	-- 	"MunifTanjim/nui.nvim",
	-- 	-- OPTIONAL:
	-- 	--   `nvim-notify` is only needed, if you want to use the notification view.
	-- 	--   If not available, we use `mini` as the fallback
	-- 	"rcarriga/nvim-notify",
	-- },
	-- config = function()
	-- 	require("noice").setup({
	-- 		lsp = {
	-- 			-- override markdown rendering so that **cmp** and other plugins use **Treesitter**
	-- 			override = {
	-- 				["vim.lsp.util.convert_input_to_markdown_lines"] = true,
	-- 				["vim.lsp.util.stylize_markdown"] = true,
	-- 				["cmp.entry.get_documentation"] = true, -- requires hrsh7th/nvim-cmp
	-- 			},
	-- 		},
	-- 		-- do not show "Written messages"
	-- 		routes = {
	-- 			{
	-- 				filter = {
	-- 					event = "msg_show",
	-- 					kind = "",
	-- 					find = "written",
	-- 				},
	-- 				opts = { skip = true },
	-- 			},
	--
	-- 			{
	-- 				filter = {
	-- 					event = "notify",
	-- 					find = "Config Change Detected",
	-- 				},
	-- 				opts = { skip = true },
	-- 			},
	--
	-- 			-- Do not show debug messages
	-- 			-- Comment this block if you want to see debug messages
	-- 			{
	-- 				filter = {
	-- 					event = "msg_show",
	-- 					find = "vinod.debug",
	-- 				},
	-- 				opts = { skip = true },
	-- 			},
	--
	-- 			-- Do not show indent messages
	-- 			{
	-- 				filter = {
	-- 					event = "msg_show",
	-- 					find = "indent",
	-- 				},
	-- 				opts = { skip = true },
	-- 			},
	-- 		},
	--
	-- 		-- you can enable a preset for easier configuration
	-- 		presets = {
	-- 			bottom_search = true, -- use a classic bottom cmdline for search
	-- 			command_palette = true, -- position the cmdline and popupmenu together
	-- 			long_message_to_split = true, -- long messages will be sent to a split
	-- 			inc_rename = true, -- enables an input dialog for inc-rename.nvim
	-- 			lsp_doc_border = true, -- add a border to hover docs and signature help
	-- 		},
	-- 		-- Command line configuration
	-- 		cmdline = {
	-- 			enabled = true, -- enables the Noice cmdline UI
	-- 			--view = "cmdline_popup", -- view for rendering the cmdline. Change to `cmdline` to get a classic cmdline at the bottom
	-- 			view = "cmdline", -- view for rendering the cmdline. Change to `cmdline` to get a classic cmdline at the bottom
	-- 			opts = {}, -- global options for the cmdline. See section on views
	-- 			format = {
	-- 				-- conceal: (default=true) This will hide the text in the cmdline that matches the pattern.
	-- 				-- view: (default is cmdline view)
	-- 				-- opts: any options passed to the view
	-- 				-- icon_hl_group: optional hl_group for the icon
	-- 				-- title: set to anything or empty string to hide
	-- 				cmdline = { pattern = "^:", icon = "", lang = "vim" },
	-- 				search_down = { kind = "search", pattern = "^/", icon = " ", lang = "regex" },
	-- 				search_up = { kind = "search", pattern = "^%?", icon = " ", lang = "regex" },
	-- 				filter = { pattern = "^:%s*!", icon = "$", lang = "bash" },
	-- 				lua = { pattern = { "^:%s*lua%s+", "^:%s*lua%s*=%s*", "^:%s*=%s*" }, icon = "", lang = "lua" },
	-- 				help = { pattern = "^:%s*he?l?p?%s+", icon = "H" },
	-- 				input = { view = "cmdline_input", icon = "󰥻 " }, -- Used by input()
	-- 				-- lua = false, -- to disable a format, set to `false`
	-- 			},
	-- 		}, -- End of cmdline configuration
	-- 	})
	-- end,
	--
	-- --Keymaps
	-- -- Dismiss Noice Notifications
	-- vim.api.nvim_set_keymap(
	-- 	"n",
	-- 	"<Space><Space>",
	-- 	"<Cmd>NoiceDismiss<CR>",
	-- 	{ noremap = true, silent = true, desc = "Dismiss Noice Notifications." }
	-- ),
}
